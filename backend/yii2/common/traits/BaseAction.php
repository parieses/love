<?php
namespace common\traits;
use common\tools\Code;
use common\tools\Common;
use Yii;
use yii\web\Response;

trait BaseAction
{
    public  $start = 0;

    public function actions()
    {
        $this->enableCsrfValidation = false;
        $this->start  = Common::getMillisecond();
        $actions = parent::actions();
        // 禁用 "delete" 和 "create" 动作
        unset($actions['delete'], $actions['create']);
        // 使用 "prepareDataProvider()" 方法自定义数据 provider
        $actions['index']['prepareDataProvider'] = [$this, 'prepareDataProvider'];
        return $actions;
    }

    public function beforeAction($action)
    {

        parent::beforeAction($action); // TODO: Change the autogenerated stub

        //处理响应格式
        Yii::$app->response->on(
            Response::EVENT_BEFORE_SEND,
            function ($event) {
                $response = $event->sender;
                $response->format = Response::FORMAT_JSON;
                if (!isset($response->data['code'])) {
                    $message = '获取成功';
                    if (isset($response->data['message'])) {
                        $message = $response->data['message'];
                    } elseif (!$response->isSuccessful && isset($response->data[0]['message'])) {
                        $message = $response->data[0]['message'];
                    }
                    $response->data = [
                        'message' => $message,
                        'code' => $response->isSuccessful ? $response->data['code'] ?? Code::getSuccessCode() : Code::getErrorCode(),
                        'data' => $response->data ?: [],
                        'duration' => Common::getMillisecond() - $this->start
                    ];
                }else{
                    $response->data['duration'] = Common::getMillisecond() - $this->start;
                }
                $response->statusCode = 200;
            }
        );
        return $action;
    }
}